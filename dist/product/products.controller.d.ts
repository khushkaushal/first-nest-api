import { ProductsService } from './products.service';
export declare class ProductsController {
    private readonly productService;
    constructor(productService: ProductsService);
    addProduct(prodTitle: string, prodDesc: string, prodPrice: number): any;
    getAllProducts(): {
        [x: number]: import("./product.model").Product;
        length: number;
        toString(): string;
        toLocaleString(): string;
        pop(): import("./product.model").Product;
        push(...items: import("./product.model").Product[]): number;
        concat(...items: ConcatArray<import("./product.model").Product>[]): import("./product.model").Product[];
        concat(...items: (import("./product.model").Product | ConcatArray<import("./product.model").Product>)[]): import("./product.model").Product[];
        join(separator?: string): string;
        reverse(): import("./product.model").Product[];
        shift(): import("./product.model").Product;
        slice(start?: number, end?: number): import("./product.model").Product[];
        sort(compareFn?: (a: import("./product.model").Product, b: import("./product.model").Product) => number): import("./product.model").Product[];
        splice(start: number, deleteCount?: number): import("./product.model").Product[];
        splice(start: number, deleteCount: number, ...items: import("./product.model").Product[]): import("./product.model").Product[];
        unshift(...items: import("./product.model").Product[]): number;
        indexOf(searchElement: import("./product.model").Product, fromIndex?: number): number;
        lastIndexOf(searchElement: import("./product.model").Product, fromIndex?: number): number;
        every<S extends import("./product.model").Product>(predicate: (value: import("./product.model").Product, index: number, array: import("./product.model").Product[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: import("./product.model").Product, index: number, array: import("./product.model").Product[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: import("./product.model").Product, index: number, array: import("./product.model").Product[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: import("./product.model").Product, index: number, array: import("./product.model").Product[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: import("./product.model").Product, index: number, array: import("./product.model").Product[]) => U, thisArg?: any): U[];
        filter<S_1 extends import("./product.model").Product>(predicate: (value: import("./product.model").Product, index: number, array: import("./product.model").Product[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: import("./product.model").Product, index: number, array: import("./product.model").Product[]) => unknown, thisArg?: any): import("./product.model").Product[];
        reduce(callbackfn: (previousValue: import("./product.model").Product, currentValue: import("./product.model").Product, currentIndex: number, array: import("./product.model").Product[]) => import("./product.model").Product): import("./product.model").Product;
        reduce(callbackfn: (previousValue: import("./product.model").Product, currentValue: import("./product.model").Product, currentIndex: number, array: import("./product.model").Product[]) => import("./product.model").Product, initialValue: import("./product.model").Product): import("./product.model").Product;
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: import("./product.model").Product, currentIndex: number, array: import("./product.model").Product[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: import("./product.model").Product, currentValue: import("./product.model").Product, currentIndex: number, array: import("./product.model").Product[]) => import("./product.model").Product): import("./product.model").Product;
        reduceRight(callbackfn: (previousValue: import("./product.model").Product, currentValue: import("./product.model").Product, currentIndex: number, array: import("./product.model").Product[]) => import("./product.model").Product, initialValue: import("./product.model").Product): import("./product.model").Product;
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: import("./product.model").Product, currentIndex: number, array: import("./product.model").Product[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends import("./product.model").Product>(predicate: (this: void, value: import("./product.model").Product, index: number, obj: import("./product.model").Product[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: import("./product.model").Product, index: number, obj: import("./product.model").Product[]) => unknown, thisArg?: any): import("./product.model").Product;
        findIndex(predicate: (value: import("./product.model").Product, index: number, obj: import("./product.model").Product[]) => unknown, thisArg?: any): number;
        fill(value: import("./product.model").Product, start?: number, end?: number): import("./product.model").Product[];
        copyWithin(target: number, start: number, end?: number): import("./product.model").Product[];
        entries(): IterableIterator<[number, import("./product.model").Product]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<import("./product.model").Product>;
        includes(searchElement: import("./product.model").Product, fromIndex?: number): boolean;
        flatMap<U_3, This = undefined>(callback: (this: This, value: import("./product.model").Product, index: number, array: import("./product.model").Product[]) => U_3 | readonly U_3[], thisArg?: This): U_3[];
        flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
        [Symbol.iterator](): IterableIterator<import("./product.model").Product>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
        at(index: number): import("./product.model").Product;
    };
    getProduct(prodId: string): {
        id: string;
        title: string;
        description: string;
        price: number;
    };
    updateProduct(prodId: string, prodTitle: string, prodDesc: string, prodPrice: number): void;
    removeProduct(prodID: string): any;
}
